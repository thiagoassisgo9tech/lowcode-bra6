services:

  nginx:
    image: jwilder/nginx-proxy:latest
    hostname: ${NGINX_HOST}
    volumes:
      - ./conf/nginx/vhost:/etc/nginx/vhost.d
      - ./conf/nginx/conf:/etc/nginx/conf.d
      - /var/run/docker.sock:/tmp/docker.sock:ro
    healthcheck:
      test: curl -f http://localhost
      interval: 2s
      timeout: 5s
      retries: 240

  n8n:
    image: docker.n8n.io/n8nio/n8n:1.106.2
    hostname: ${N8N_HOST}
    volumes:
      - ./backup/n8n:/var/backups/n8n
      - ./data/n8n:/home/node/.n8n
      - ./conf/n8n/hook:/home/node/.n8n/hook
    environment: &n8n-env
      VIRTUAL_HOST: ${N8N_VHOST}
      VIRTUAL_PORT: ${N8N_PORT}
      ENV: ${ENV}
      STAGE: ${STAGE}
      QUALIFIER: ${QUALIFIER}
      N8N_PROXY_HOPS: "1"
      N8N_BLOCK_ENV_ACCESS_IN_NODE: false
      N8N_EDITOR_BASE_URL: https://${N8N_VHOST}
      N8N_HOST: ${N8N_VHOST}
      N8N_PORT: ${N8N_PORT}
      N8N_PROTOCOL: https
      N8N_SECURE_COOKIE: false
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      NODE_ENV: production
      WEBHOOK_URL: https://${N8N_VHOST}
      NODE_FUNCTION_ALLOW_EXTERNAL: uuid,luxon
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: ${POSTGRES_HOST}
      DB_POSTGRESDB_PORT: ${POSTGRES_PORT}
      DB_POSTGRESDB_USER: ${POSTGRES_USER}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_POSTGRESDB_DATABASE: ${N8N_DATABASE}
      N8N_PERSONALIZATION_ENABLED: false
      N8N_DIAGNOSTICS_ENABLED: false
      N8N_REINSTALL_MISSING_PACKAGES: true
      EXECUTIONS_DATA_PRUNE: true
      EXECUTIONS_DATA_MAX_AGE: 336
      EXECUTIONS_DATA_PRUNE_MAX_COUNT: 32768
      N8N_RUNNERS_ENABLED: true
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: false
      FLOWISE_HOST: ${FLOWISE_HOST}
      FLOWISE_PORT: ${FLOWISE_PORT}
      LANGFUSE_DATABASE_HOST: ${POSTGRES_HOST}
      LANGFUSE_DATABASE_PORT: ${POSTGRES_PORT}
      LANGFUSE_DATABASE_NAME: ${POSTGRES_USER}
      LANGFUSE_DATABASE_USERNAME: ${POSTGRES_PASSWORD}
      LANGFUSE_DATABASE_PASSWORD: ${LANGFUSE_DATABASE}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DATABASE: ${N8N_REDIS_DATABASE}
      N8N_ADMIN_EMAIL: ${ADMIN_EMAIL}
      N8N_ADMIN_PASSWORD: ${ADMIN_PASSWORD}

    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://127.0.0.1:${N8N_PORT}/api/health
      interval: 2s
      timeout: 5s
      retries: 240
    restart: unless-stopped

  flowise:
    image: flowiseai/flowise:2.2.8
    hostname: ${FLOWISE_HOST}
    entrypoint: /bin/sh -c "sleep 3; flowise start"
    environment:
      VIRTUAL_HOST: ${FLOWISE_VHOST}
      VIRTUAL_PORT: ${FLOWISE_PORT}
      # VITE_API_BASE_URL: https://${FLOWISE_VHOST}/core
      # VITE_UI_BASE_URL: https://${FLOWISE_VHOST}/core
      DEBUG: true
      PORT: ${FLOWISE_PORT}
      FLOWISE_USERNAME: ${ADMIN_USERNAME}
      FLOWISE_PASSWORD: ${ADMIN_PASSWORD}
      FLOWISE_SECRETKEY_OVERWRITE: ${FLOWISE_SECRETKEY_OVERWRITE}
      FLOWISE_FILE_SIZE_LIMIT: 256mb
      APIKEY_PATH: /root/.flowise
      SECRETKEY_PATH: /root/.flowise
      LOG_LEVEL: debug
      LOG_PATH: /root/.flowise/logs
      DATABASE_TYPE: postgres
      DATABASE_HOST: ${POSTGRES_HOST}
      DATABASE_PORT: ${POSTGRES_PORT}
      DATABASE_NAME: ${FLOWISE_DATABASE}
      DATABASE_USER: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      STORAGE_TYPE: s3
      S3_ENDPOINT_URL: https://${MINIO_VHOST}
      S3_STORAGE_ACCESS_KEY_ID: ${FLOWISE_MINIO_ACCESS_KEY}
      S3_STORAGE_SECRET_ACCESS_KEY: ${FLOWISE_MINIO_SECRET_KEY}
      S3_STORAGE_REGION: ${MINIO_REGION}
      S3_STORAGE_BUCKET_NAME: ${FLOWISE_MINIO_BUCKET_NAME}
      S3_FORCE_PATH_STYLE: "true"
      TOOL_FUNCTION_EXTERNAL_DEP: node-fetch,@redis/client
      # redis interno do flowise = 7 configurado na ui
      REDIS_BASE_URL: redis://${REDIS_HOST}:${REDIS_PORT}/${FLOWISE_REDIS_USER_DATABASE} # redis para persitencia do dev
    volumes:
      - ./data/flowise:/root/.flowise
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:${FLOWISE_PORT}
      interval: 2s
      timeout: 5s
      retries: 240
    restart: unless-stopped

  langfuse-worker:
    image: langfuse/langfuse-worker:latest
    hostname: ${LANGFUSE_WORKER_HOST}
    environment: &langfuse-worker-env
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${LANGFUSE_DATABASE}
      SALT: ${LANGFUSE_SALT}
      ENCRYPTION_KEY: ${LANGFUSE_ENCRYPTION_KEY}
      TELEMETRY_ENABLED: ${TELEMETRY_ENABLED:-true}
      LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES: ${LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES:-true}
      CLICKHOUSE_MIGRATION_URL: clickhouse://${CLICKHOUSE_HOST}:${CLICKHOUSE_TCP_PORT}
      CLICKHOUSE_URL: http://${CLICKHOUSE_HOST}:${CLICKHOUSE_HTTP_PORT}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_CLUSTER_ENABLED: ${CLICKHOUSE_CLUSTER_ENABLED:-false}
      LANGFUSE_S3_EVENT_UPLOAD_BUCKET: ${LANGFUSE_MINIO_BUCKET_NAME}
      LANGFUSE_S3_EVENT_UPLOAD_REGION: ${MINIO_REGION}
      LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID: ${LANGFUSE_MINIO_ACCESS_KEY}
      LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY: ${LANGFUSE_MINIO_SECRET_KEY}
      LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: http://${MINIO_HOST}:${MINIO_API_PORT}
      LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE: true
      LANGFUSE_S3_EVENT_UPLOAD_PREFIX: events/
      LANGFUSE_S3_MEDIA_UPLOAD_BUCKET: ${LANGFUSE_MINIO_BUCKET_NAME}
      LANGFUSE_S3_MEDIA_UPLOAD_REGION: ${MINIO_REGION}
      LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID: ${LANGFUSE_MINIO_ACCESS_KEY}
      LANGFUSE_S3_MEDIA_UPLOAD_SECRET_ACCESS_KEY: ${LANGFUSE_MINIO_SECRET_KEY}
      LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT: http://${MINIO_HOST}:${MINIO_API_PORT}
      LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE: true
      LANGFUSE_S3_MEDIA_UPLOAD_PREFIX: media/
      LANGFUSE_INGESTION_QUEUE_DELAY_MS: ${LANGFUSE_INGESTION_QUEUE_DELAY_MS:-}
      LANGFUSE_INGESTION_CLICKHOUSE_WRITE_INTERVAL_MS: ${LANGFUSE_INGESTION_CLICKHOUSE_WRITE_INTERVAL_MS:-}
      REDIS_CONNECTION_STRING: ${REDIS_BASE_URL}/${LANGFUSE_REDIS_DATABASE}
    depends_on: &langfuse-depends-on
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy

  langfuse-ui:
    image: langfuse/langfuse:latest
    hostname: ${LANGFUSE_HOST}
    environment:
      <<: *langfuse-worker-env
      VIRTUAL_HOST: ${LANGFUSE_VHOST}
      VIRTUAL_PORT: ${LANGFUSE_PORT}
      NEXTAUTH_URL: http://localhost:${LANGFUSE_PORT}
      NEXTAUTH_SECRET: ${LANGFUSE_NEXTAUTH_SECRET}
      LANGFUSE_INIT_ORG_ID: ${DOMAIN}
      LANGFUSE_INIT_ORG_NAME: ${DOMAIN}
      LANGFUSE_INIT_PROJECT_ID: ${LANGFUSE_INIT_PROJECT_ID}
      LANGFUSE_INIT_PROJECT_NAME: '${LANGFUSE_INIT_PROJECT_NAME}'
      LANGFUSE_INIT_PROJECT_PUBLIC_KEY: ${LANGFUSE_INIT_PROJECT_PUBLIC_KEY}
      LANGFUSE_INIT_PROJECT_SECRET_KEY: ${LANGFUSE_INIT_PROJECT_SECRET_KEY}
      LANGFUSE_INIT_USER_EMAIL: ${ADMIN_EMAIL}
      LANGFUSE_INIT_USER_NAME: ${ADMIN_USERNAME}
      LANGFUSE_INIT_USER_PASSWORD: ${ADMIN_PASSWORD}
    depends_on: *langfuse-depends-on

  stirling-pdf:
    image: frooodle/s-pdf:latest
    hostname: ${STIRLING_PDF_HOST}
    environment:
      VIRTUAL_HOST: ${STIRLING_PDF_VHOST}
      VIRTUAL_PORT: ${STIRLING_PDF_PORT}
      DOCKER_ENABLE_SECURITY: false
      INSTALL_BOOK_AND_ADVANCED_HTML_OPS: true
      LANGS: pt_BR,en_US
    volumes:
      - ./conf/stirling-pdf:/configs
      - ./data/stirling-pdf:/usr/share/tessdata

  redisinsight:
    image: redis/redisinsight:latest
    hostname: ${REDISINSIGHT_HOST}
    volumes:
      - ./data/redisinsight:/data
    environment:
      VIRTUAL_HOST: ${REDISINSIGHT_VHOST}
      VIRTUAL_PORT: ${REDISINSIGHT_PORT}
      RI_APP_PORT: ${REDISINSIGHT_PORT}
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: sh -c 'timeout 5 bash -c "cat < /dev/null > /dev/tcp/localhost/${REDISINSIGHT_PORT}"'
      interval: 2s
      timeout: 5s
      retries: 240
    restart: unless-stopped

  redis:
    image: redis/redis-stack-server:latest
    hostname: ${REDIS_HOST}
    volumes:
      - ./data/redis:/data
    environment:
      REDIS_ARGS: --port ${REDIS_PORT} --databases 16
    healthcheck:
      test: redis-cli --raw incr ping
      interval: 2s
      timeout: 5s
      retries: 240
    restart: unless-stopped

  qdrant:
    image: qdrant/qdrant:latest
    hostname: ${QDRANT_HOST}
    volumes:
      - ./data/qdrant:/qdrant/storage
    environment:
      VIRTUAL_HOST: ${QDRANT_VHOST}
      VIRTUAL_PORT: ${QDRANT_PORT}
      QDRANT__SERVICE__HTTP_PORT: ${QDRANT_PORT}
    healthcheck:
      test: sh -c 'timeout 5 bash -c "cat < /dev/null > /dev/tcp/localhost/${QDRANT_PORT}"'
      interval: 2s
      timeout: 5s
      retries: 240
    restart: unless-stopped

  clickhouse:
    image: clickhouse/clickhouse-server
    hostname: ${CLICKHOUSE_HOST}
    user: "101:101"
    volumes:
      - ./data/clickhouse/data:/var/lib/clickhouse
      - ./data/clickhouse/logs:/var/log/clickhouse-server
    environment:
      VIRTUAL_HOST: ${CLICKHOUSE_VHOST}
      VIRTUAL_PORT: ${CLICKHOUSE_HTTP_PORT}
      CLICKHOUSE_DB: ${CLICKHOUSE_DATABASE}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:${CLICKHOUSE_HTTP_PORT}/ping || exit 1
      interval: 2s
      timeout: 5s
      retries: 240
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    hostname: ${PGADMIN_HOST}
    volumes:
      - ./data/pgadmin:/var/lib/pgadmin
    environment:
      VIRTUAL_HOST: ${PGADMIN_VHOST}
      VIRTUAL_PORT: ${PGADMIN_PORT}
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: pgvector/pgvector:pg16
    hostname: ${POSTGRES_HOST}
    volumes:
      - ./backup/postgres:/var/lib/postgresql/backup
      - ./data/postgres/data:/var/lib/postgresql/data
      - ./conf/postgres/etc/postgresql.conf:/etc/postgresql.conf
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command: -c config_file=/etc/postgresql.conf
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 2s
      timeout: 5s
      retries: 240
    restart: unless-stopped

  minio:
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z
    hostname: ${MINIO_HOST}
    volumes:
      - ./data/minio:/data
    environment:
      VIRTUAL_HOST: ${MINIO_VHOST}
      VIRTUAL_PORT: ${MINIO_API_PORT}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_SERVER_URL: https://${MINIO_VHOST}
      MINIO_BROWSER_REDIRECT_URL: https://${MINIO_VHOST}/ui
      MINIO_REGION: ${MINIO_REGION}
    command: server /data --address ":${MINIO_API_PORT}" --console-address ":${MINIO_CONSOLE_PORT}"
    healthcheck:
      test: curl -f http://localhost:${MINIO_API_PORT}/minio/health/live || exit 1
      interval: 2s
      timeout: 5s
      retries: 30
    restart: unless-stopped

  roundcube:
    image: roundcube/roundcubemail:latest
    hostname: ${ROUNDCUBE_HOST}
    environment:
      VIRTUAL_HOST: ${ROUNDCUBE_VHOST}
      VIRTUAL_PORT: ${ROUNDCUBE_PORT}
      ROUNDCUBEMAIL_DEFAULT_HOST: ${GREENMAIL_HOST}  # IMAP server - tls:// prefix for STARTTLS, ssl:// for SSL/TLS
      ROUNDCUBEMAIL_DEFAULT_PORT: ${GREENMAIL_IMAP_PORT}       # IMAP port
      ROUNDCUBEMAIL_SMTP_SERVER: ${GREENMAIL_HOST}   # SMTP server - tls:// prefix for STARTTLS, ssl:// for SSL/TLS
      ROUNDCUBEMAIL_SMTP_PORT: ${GREENMAIL_SMTP_PORT}          # SMTP port
    depends_on:
      - greenmail
    healthcheck:
      test: sh -c 'timeout 5 bash -c "cat < /dev/null > /dev/tcp/localhost/${ROUNDCUBE_PORT}"'
      interval: 2s
      timeout: 5s
      retries: 240
    restart: unless-stopped

  greenmail:
    image: greenmail/standalone:latest
    hostname: ${GREENMAIL_HOST}
#    ports:
#      - 3025:3025 # SMTP
#      - 3110:3110 # POP3
#      - 3143:3143 # IMAP
#      - 3465:3465 # SMTPS
#      - 3993:3993 # IMAPS
#      - 3995:3995 # POP3S
#      - 3999:8080 # API
    environment:
      JAVA_OPTS: -Dgreenmail.verbose
    healthcheck:
      test: sh -c 'timeout 5 bash -c "cat < /dev/null > /dev/tcp/localhost/${GREENMAIL_SMTP_PORT}"'
      interval: 2s
      timeout: 5s
      retries: 240
    restart: unless-stopped
